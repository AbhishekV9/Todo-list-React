{"version":3,"sources":["components/TodoCard.js","actions/index.js","components/Form.js","components/App.js","reducers/index.js","index.js"],"names":["TodoCard","props","list","index","className","style","width","id","title","String","completed","onClick","complete","delete","ADD_LISTS","ADD_NEW","UPDATE_LIST","DELETE_TAKS","COMPLETE_TASK","HandleTodoApi","dispatch","fetch","then","response","json","type","AddList","AddTodoApi","text","length","method","headers","body","JSON","stringify","userId","data","AddnewData","Update","updateText","updateState","Number","HandleDelete","DeleteTask","CompleteTask","TaskComplete","Form","handleAddTask","a","setState","idNo","state","alert","console","log","handleUpdateTask","parseInt","handleChange","e","target","value","handleIdChange","whatUpdate","placeholder","this","onChange","Component","connectedComponent","connect","App","handleDeleteTask","handleCompleteTask","map","listItem","initialState","store","createStore","action","findIndex","newArray","listeItem","filteredArray","filter","i","copyArray","applyMiddleware","logger","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.246e4c43.chunk.js","sourcesContent":["import React  from \"react\";\r\n\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\n\r\n//functional component:-return task\r\nfunction TodoCard(props){\r\n    const {list,index}=props;\r\n    return(\r\n        <div className=\"card\" style={{width: \"20rem\"} } >\r\n        <div className=\"card-header \">\r\n        <h5 className=\"card-title\">Task No:- {index+1} </h5>\r\n        <h5 className=\"card-title\">ID:- {list.id} </h5>\r\n        </div>    \r\n        <div className=\"card-body\">\r\n        <p className=\"card-text\">Task:- { list.title} </p>\r\n          <p className=\"card-text\">Completed:- { String(list.completed)} </p>\r\n           <div className=\"df\">\r\n              <button className=\"btn btn-outline-success\" onClick= { () => props.complete(list.id)}>Completed</button>\r\n              <button className=\"btn btn-outline-danger\" onClick = { () => props.delete(list.id)} >Delete</button>\r\n           </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default TodoCard;","//defined all the required const\r\nexport const ADD_LISTS= 'ADD_LISTS';\r\nexport const ADD_NEW= 'ADD_NEW';\r\nexport const UPDATE_LIST= \"UPDATE_LIST\";\r\nexport const DELETE_TAKS= \"DELETE_TASK\";\r\nexport const COMPLETE_TASK=\"COMPLETE_TASK\";\r\n\r\n\r\nexport function TaskComplete(id){\r\n    return{\r\n        type:COMPLETE_TASK,\r\n        id\r\n    }\r\n}\r\n\r\nexport function DeleteTask(id){\r\n    return{\r\n        type:DELETE_TAKS,\r\n        id\r\n    }\r\n}\r\nexport function AddList(list){\r\n    return{\r\n        type:ADD_LISTS,\r\n        list\r\n    }\r\n}\r\n\r\nexport function AddnewData(data){\r\n    return{\r\n        type:ADD_NEW,\r\n        data\r\n    }\r\n}\r\n\r\nexport function updateState(id,text){\r\n    return{\r\n        type:UPDATE_LIST,\r\n        id,\r\n        text\r\n    }\r\n}\r\n\r\n//returning a function wich is then call by thunk middleware with dispatch as an argument:- This function is used to call API and then dispatching the action with the Data we get after API call.\r\nexport function HandleTodoApi(){\r\n    \r\n    const url= 'https://jsonplaceholder.typicode.com/todos';\r\n    return function(dispatch){\r\n      \r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(list => {\r\n            dispatch(AddList(list))\r\n        });\r\n    }\r\n}\r\n\r\n//returning a function wich is then call by thunk middleware with dispatch as an argument:- This function is used to make Fake API call because we cannot change server side data and then dispatching an action to add new Task to our gloabal state\r\nexport function AddTodoApi(text,length){\r\n    const url='https://jsonplaceholder.typicode.com/todos';\r\n\r\n    return function(dispatch){\r\n\r\n        fetch(url,{\r\n            method:'POST',\r\n            headers: { \"Content-Type\" : \"application/json\"},\r\n            body:JSON.stringify({\r\n                userId:1,\r\n                title:text,\r\n                completed:false        \r\n            })\r\n\r\n        }).then(response => response.json())\r\n        .then(data => {\r\n            data.id=length;\r\n            dispatch(AddnewData(data));\r\n        })\r\n    }\r\n}\r\n\r\n//returning a function wich is then call by thunk middleware with dispatch as an argument:- This function is used to make Fake API call because we cannot change server side data and then dispatching an action to update the task for given Id in our gloabal state.\r\nexport function Update(id,updateText){\r\n    const url=`https://jsonplaceholder.typicode.com/todos/1`;\r\n\r\n    return function(dispatch){\r\n\r\n        fetch(url,{\r\n            method:'PUT',\r\n            headers: {\r\n                'Content-type': 'application/json; charset=UTF-8',\r\n              },\r\n            body:JSON.stringify({\r\n                    id:id,\r\n                    title:updateText,\r\n                \r\n            })\r\n        }).then(response => response.json())\r\n        .then(data => {\r\n            dispatch(updateState(Number(id),updateText)); \r\n        })\r\n    }\r\n    \r\n}\r\n\r\n//returning a function wich is then call by thunk middleware with dispatch as an argument:- This function is used to make Fake API call because we cannot change server side data and then dispatching an action to delete Task for given id in global state.\r\nexport function HandleDelete(id){\r\n\r\n    const url='https://jsonplaceholder.typicode.com/todos/1';\r\n\r\n    return function(dispatch){\r\n        fetch(url,{\r\n            method:'DELETE'\r\n        }).then(response => response.json())\r\n        .then(data => {\r\n            dispatch(DeleteTask(id))\r\n        })\r\n    }\r\n}\r\n\r\n//returning a function wich is then call by thunk middleware with dispatch as an argument:- This function is used to make Fake API call because we cannot change server side data and then dispatching an action to complete Task for given id in global state.\r\nexport function CompleteTask(id){\r\n    const url='https://jsonplaceholder.typicode.com/todos/1';\r\n\r\n    return function(dispatch){\r\n        fetch(url,{\r\n            method:'PUT',\r\n            headers: {\r\n                'Content-type': 'application/json; charset=UTF-8',\r\n              },\r\n            body:JSON.stringify({\r\n                    id:id,\r\n                    completed:true,\r\n                \r\n            })\r\n        }).then(response => response.json())\r\n        .then(data => {\r\n            dispatch(TaskComplete(id));\r\n        })\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\nimport { AddTodoApi, Update } from '../actions';\r\n\r\nclass Form extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        //local state for this component\r\n        this.state={\r\n            text:'',\r\n            id:'',\r\n            updateText:'',\r\n            idNo:200\r\n        }\r\n    }\r\n\r\n    //on Add task button dispatching an action to add that task into our Global state\r\n    handleAddTask=async ()=>{\r\n        await this.setState({\r\n            idNo:this.state.idNo+1\r\n        })\r\n        const {text,idNo}=this.state;\r\n        if(text===''){\r\n            alert(\"Please Enter Task Title\")\r\n            return;\r\n        }\r\n        const length=idNo;\r\n        await this.props.dispatch(AddTodoApi(text,length));\r\n        this.setState({\r\n            text:'',\r\n        })\r\n        console.log(\"statt\",this.state);\r\n    }\r\n\r\n    //on clicking update button we are dispatching an action to update the task according to the provided ID\r\n    handleUpdateTask=async ()=>{\r\n        const {id,updateText}= this.state;\r\n        if(id=== '' || updateText=== ''){\r\n            alert(\"Please Enter the ID and Text\");\r\n            return;\r\n        }\r\n        const {dispatch} =this.props;\r\n        await dispatch(Update(parseInt(id),updateText));\r\n        this.setState({\r\n            id:'',\r\n            updateText:''\r\n        })\r\n        console.log(this.state);\r\n    }\r\n\r\n    //on change in input feild of Add task we are changing our local state \r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            text:e.target.value\r\n        })\r\n    }\r\n\r\n    //on change in update task input feild of ID :- here changing our local state\r\n    handleIdChange=(e)=>{\r\n        this.setState({\r\n            id:e.target.value\r\n        })\r\n    }\r\n\r\n    //on change in update task input feid of what update changing our local state\r\n    whatUpdate=(e) =>{      \r\n        this.setState({\r\n            updateText:e.target.value\r\n        })\r\n    }\r\n\r\n    //rendering the whole component\r\n    render(){      \r\n        return(\r\n           <div className='p-3'>\r\n                <div className=\"header\">\r\n                    <div className=\"mx-auto m-3 \" style={ {width: \"150px\"} }>\r\n                    <h2>Add Task</h2>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"input-group mb-3 p-3\">\r\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Enter the task\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\" value={this.state.text} onChange={this.handleChange} />\r\n                    <button className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={this.handleAddTask}>Add Task</button>\r\n                </div>\r\n            \r\n                <div className=\"mt-5\">\r\n                    <div className=\"header\">\r\n                        <div className=\"mx-auto m-3 \" style={ {width: \"200px\"} }>\r\n                        <h2>Update Task</h2>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"p-3\">\r\n                        <h4>Enter Task Title</h4>\r\n\r\n                        <div className=\"input-group mb-3 \">                   \r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"What to Update\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\" value={this.state.updateText} onChange={this.whatUpdate} />\r\n                        </div>\r\n\r\n                        <h4>Enter Task Id</h4>\r\n\r\n                        <input type=\"number\" className=\"form-control \" placeholder=\"List Id\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\" value={this.state.id} onChange={this.handleIdChange} />\r\n\r\n                        <div className=\"mx-auto m-3 \" style={ {width: \"150px\"} }>\r\n                        <button className=\"btn btn-primary\" onClick={this.handleUpdateTask}> Update Task</button>\r\n\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\n//getting list array from gloabal state\r\nfunction mapStateToProps(state){\r\n    return{\r\n        list:state.list\r\n    }\r\n}\r\n\r\n//connecting our form component to store to get global state access\r\nconst connectedComponent=connect(mapStateToProps)(Form);\r\n\r\nexport default connectedComponent;","import React,{ Component} from 'react';\nimport {connect } from \"react-redux\";\n\nimport TodoCard from './TodoCard';\nimport Form from './Form'\nimport { HandleTodoApi , HandleDelete, CompleteTask } from '../actions';\n\nclass App extends Component{\n  \n  //when component is mounted then dispatching an action to fetch tasks from API\n  componentDidMount(){\n    this.props.dispatch(HandleTodoApi());\n  }\n\n  //function for deleting tasks from state\n  handleDeleteTask= (id)=> {\n    this.props.dispatch(HandleDelete(id))\n  }\n\n  //function to marks task as completed \n  handleCompleteTask= (id) => {\n    this.props.dispatch(CompleteTask(id))\n  }\n\n  render(){\n    const {list}= this.props;\n    return(\n      <div >\n          <div   className=\"header h-5 fixed-top mb-7\">\n            <div className=\"mx-auto m-3\" style={ {width: \"280px\"} }>\n              <h1>TODO-LIST</h1>\n            </div>\n          </div>\n          <div id=\"main\" className=\"b-3 mt-3\">\n            {/* rendering form Component */}\n            <div id=\"form\" className=\"w-40 \">\n                <Form />\n            </div>\n            <div id=\"todo-container\" className=\"w-50 bl-3 mb-4\">\n              {/* rendering todoCard component */}\n                { list.map((listItem,index)=>(\n                  <div className=\"mt-6\">\n                        <TodoCard \n                        list={listItem}\n                        key={listItem.id}\n                        index={index}\n                        delete={this.handleDeleteTask}\n                        complete={this.handleCompleteTask}\n                        />\n                  </div>\n                ))}\n            </div>\n          </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n  return{\n    list:state.list,\n  }\n}\n\nconst connectedComponent=connect(mapStateToProps)(App);\nexport default connectedComponent;\n","//importing all the required const from actions\r\nimport { ADD_LISTS,\r\n    ADD_NEW,\r\n    COMPLETE_TASK,\r\n    DELETE_TAKS,\r\n    UPDATE_LIST \r\n} from '../actions'\r\n\r\n//initial state\r\nconst initialState={\r\n    list:[]\r\n}\r\n\r\nexport default function TodoLists(state= initialState,action){\r\n  switch(action.type){\r\n      //Adding all the data that we got from making API call to our state\r\n      case ADD_LISTS:\r\n          return{\r\n              list:action.list\r\n          }\r\n      //Adding new task to our state\r\n      case ADD_NEW:\r\n          return{\r\n              list:[action.data , ...state.list ]\r\n          }\r\n      //updating the task in our state\r\n      case UPDATE_LIST:\r\n          const text=action.text;\r\n          const index=state.list.findIndex( list => list.id === action.id); //getting index of the task from List array in our state on the basis of Id\r\n          const newArray=state.list.map(listeItem => ({...listeItem}));//deep cloaning the list array from state\r\n          newArray[index].title=text;//changing title\r\n          return{\r\n              ...state,\r\n              list:newArray\r\n          }\r\n      case DELETE_TAKS:\r\n          //filetering array on the basis of given ID and then changing list array in state from this filtered Array\r\n          const filteredArray=state.list.filter(list => list.id !== action.id);\r\n          return{\r\n              ...state,\r\n              list:filteredArray\r\n          }\r\n      case COMPLETE_TASK:\r\n          const i=state.list.findIndex( list => list.id === action.id); //getting index of the task from List array in our state on the basis of Id\r\n          const copyArray=state.list.map(listeItem => ({...listeItem}));//deep cloaning the list array from state\r\n          copyArray[i].completed=true;//changing completed to true\r\n          return{\r\n              ...state,\r\n              list:copyArray\r\n          }\r\n      default:\r\n          return  state;\r\n          \r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n\nimport './index.css';\nimport rootReducer from './reducers';\n\n\n//creating Store\nconst store=createStore(rootReducer,applyMiddleware(logger,thunk))\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}